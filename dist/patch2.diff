Index: net/sf/l2j/gameserver/actor/ai/type/CreatureAI.java
===================================================================
--- net/sf/l2j/gameserver/actor/ai/type/CreatureAI.java
+++ net/sf/l2j/gameserver/actor/ai/type/CreatureAI.java
@@ -??,?? +??,?? @@
@Override
protected void onEvtArrived()
{
	_actor.revalidateZone(true);

	if (_actor.moveToNextRoutePoint())
		return;

	if (_actor instanceof Attackable)
		((Attackable) _actor).setIsReturningToSpawnPoint(false);

	clientStoppedMoving();

+	// @Marcoviny Important For FakePlayers
+	if (_actor instanceof FakePlayer)
+	{
+		((FakePlayer) _actor).getFakeAi().setUserReachedDestination(true);
+	}
+	
	// If the Intention was MOVE_TO, set the Intention to ACTIVE
	if (getIntention() == CtrlIntention.MOVE_TO)
		setIntention(CtrlIntention.ACTIVE);

	// Launch actions corresponding to the Event Think
	onEvtThink();
}
Index: com/elfocrash/roboto/ai/FakePlayerAI.java
===================================================================
--- com/elfocrash/roboto/ai/FakePlayerAI.java
+++ com/elfocrash/roboto/ai/FakePlayerAI.java
@@ -??,?? +??,?? @@
		if (!GeoEngine.getInstance().canSeeTarget(_fakePlayer, _fakePlayer.getTarget()))
		{
			_fakePlayer.setIsCastingNow(false);
			moveToPawn(target, 50);
			return true;
		}
		
		return false;
	}
	
+	// walker
+	private boolean _userReachedDestination = true;
+	// @Marcoviny - turn better walker reached destine on
+	// CreatureAi onEvtArrived notify change
+	public void setUserReachedDestination(boolean reached)
+	{
+		_userReachedDestination = reached;
+	}
+	
+	public boolean getUserReachedDestination()
+	{
+		return _userReachedDestination;
+	}
+	
	public abstract void thinkAndAct();
	
	protected abstract int[][] getBuffs();
Index: com/elfocrash/roboto/ai/Walker/WalkerAI.java
===================================================================
--- com/elfocrash/roboto/ai/Walker/WalkerAI.java
+++ com/elfocrash/roboto/ai/Walker/WalkerAI.java
@@ -48,11 +48,15 @@
	@Override
	public void thinkAndAct()
	{
		setBusyThinking(true);
		handleDeath();
		
 		if (_walkNodes.isEmpty())
+		{
+			setUserReachedDestination(true);
 			return;
+		}

 		if (isWalking)
 		{
-			if (userReachedDestination(_currentWalkNode))
+			// if (userReachedDestination(_currentWalkNode))
+			if (getUserReachedDestination() && (_currentWalkNode != null))
 			{
 				if (currentStayIterations < _currentWalkNode.getStayIterations())
 				{
@@ -60,6 +64,7 @@
 					setBusyThinking(false);
 					return;
 				}
+				setUserReachedDestination(true);
 				_currentWalkNode = null;
 				currentStayIterations = 0;
 				isWalking = false;
@@ -78,8 +83,14 @@
 					_walkNodes.add(_currentWalkNode);
 					break;
 			}
-			_fakePlayer.getFakeAi().moveTo(_currentWalkNode.getX(), _currentWalkNode.getY(), _currentWalkNode.getZ());
-			isWalking = true;
+
+			if (_currentWalkNode != null)
+			{
+				// important offset nos nodes important
+				setUserReachedDestination(false);
+				_fakePlayer.getFakeAi().moveTo(_currentWalkNode.getX(), _currentWalkNode.getY(), _currentWalkNode.getZ());
+				isWalking = true;
+			}
 		}

 		setBusyThinking(false);
@@ -91,14 +102,14 @@
 		return new int[0][0];
 	}

-	protected boolean userReachedDestination(WalkNode targetWalkNode)
-	{
-		// TODO: Improve this with approximate equality and not strict
-		if (_fakePlayer.getX() == targetWalkNode.getX() && _fakePlayer.getY() == targetWalkNode.getY() && _fakePlayer.getZ() == targetWalkNode.getZ())
-			return true;
-
-		return false;
-	}
+	// protected boolean userReachedDestination(WalkNode targetWalkNode)
+	// {
+	// 	// TODO: Improve this with approximate equality and not strict
+	// 	if (_fakePlayer.getX() == targetWalkNode.getX() && _fakePlayer.getY() == targetWalkNode.getY() && _fakePlayer.getZ() == targetWalkNode.getZ())
+	// 		return true;
+	//
+	// 	return false;
+	// }

 	protected abstract WalkerType getWalkerType();
